{"version":3,"sources":["Components/Applications.js","Components/Developers.js","Components/TableType.js","Components/Home.js","Components/Forms/TicketForm.js","Components/Libs/CustomHooks.js","Components/Navigation.js","App.js","reportWebVitals.js","index.js"],"names":["Applications","Developers","TableView","props","headers","filterCriteria","tableData","tableType","TableToolBar","FilterButton","useState","filterColumnStatus","setfilterColumnStatus","filterStatus","setfilterStatus","filterColumn","setfilterColumn","filterValue","setfilterValue","updatedTableData","setUpdatedTableData","history2","useHistory","handleClick2","dropDownValue","console","log","filter","row","ListGroup","horizontal","Item","Dropdown","Toggle","variant","Menu","Set","map","value","index","onClick","Button","size","Object","keys","filterColumnClicked","push","TableHeader","headerSort","setheaderSort","sortStatus","setsortStatus","Table","striped","bordered","hover","responsive","className","rows","sortField","sortBy","TableBody","history","trKey","buildRow","rowID","sort","a","b","TableType","settableData","useEffect","fetch","response","ok","status","json","prop","jsonData","tickets","devFName","developer","developerFirstName","devLName","developerLastName","devName","ticketID","ticketName","application","applicationName","severity","Spinner","animation","role","Home","TicketForm","requestOptions","useParams","crud","id","initialState","fieldValues","setfieldValues","event","target","useFormFields","fields","handleFieldChange","missingValue","setmissingValue","missingValueArray","setmissingValueArray","getAPIStatus","setgetAPIStatus","putAPIStatus","setputAPIStatus","apiLoading","setapiLoading","developerArray","setdeveloperArray","applicationArray","setapplicationArray","setticketName","dueDate","setdueDate","dateCreated","setdateCreated","success","setsuccess","newTicket","setnewTicket","then","res","result","ticketDescription","userName","dueDateFormat","Date","dateDue","dateCreatedFormat","toDateString","developerAssigned","developerID","applicationID","ticketStatus","error","Alert","onClose","dismissible","Heading","Form","show","length","Row","Col","lg","Group","controlId","Label","Control","defaultValue","readOnly","as","onChange","placeholder","md","Severity","JSON","stringify","setDate","getDate","key","xs","missingValArray","myHeaders","Headers","append","raw","method","body","redirect","text","newDate","newDueDate","handleSubmit","disabled","Navigation","Navbar","bg","expand","Brand","Link","to","aria-controls","Collapse","Nav","defaultActiveKey","path","exact","App","Container","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.386b73c6.chunk.js","sourcesContent":["import React from 'react'\r\n//If I remove line then I can't route, make sure to NOT COPY PASTE, need to manually add exception\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom'\r\n\r\nfunction Applications() {\r\n    return (\r\n        <div>\r\n            <h1>Applications</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Applications","import React from 'react'\r\n//If I remove line then I can't route, make sure to NOT COPY PASTE, need to manually add exception\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom'\r\n\r\nfunction Developers() {\r\n  return (\r\n    <div>\r\n      <h1>Developers</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Developers","/* eslint-disable react/prop-types */\r\nimport React, { useEffect, useState } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n//import DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory, withRouter, BrowserRouter } from 'react-router-dom'\r\n\r\nfunction TableType() {\r\n\r\n  const [tableData, settableData] = useState()\r\n\r\n  useEffect(async () => {\r\n    let response = await fetch(`http://karstenbugtracker.azurewebsites.net/api/tickets`)\r\n\r\n    //Response.ok will be true if successfull message returned\r\n    if (response.ok) {\r\n      console.log(`Success: ${response.ok} ${response.status}`)\r\n      let jsonData = await response.json()\r\n      let tickets = []\r\n\r\n      for (const prop in jsonData) {\r\n        let devFName = jsonData[prop].developer.developerFirstName\r\n        let devLName = jsonData[prop].developer.developerLastName\r\n        let devName = `${devFName} ${devLName}`\r\n        tickets.push({\r\n          \"Ticked ID\": jsonData[prop].ticketID,\r\n          \"Ticket Name\": jsonData[prop].ticketName,\r\n          \"Status\": jsonData[prop].status,\r\n          \"Application\": jsonData[prop].application.applicationName,\r\n          \"Severity\": jsonData[prop].severity,\r\n          \"Developer\": devName\r\n        })\r\n      }\r\n      settableData(tickets)\r\n    }\r\n    else {\r\n      console.log(`Failure: ${response.ok} ${response.status}`)\r\n    }\r\n  }, [])\r\n\r\n  if (!tableData) {\r\n    return (\r\n      <Spinner animation=\"border\" role=\"status\" size=\"xl\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner>\r\n    )\r\n  }\r\n\r\n  console.log(tableData)\r\n\r\n  //Passed in prop from parent of tabletype defining what view(s) to use Ex:(developer)\r\n  const tableType = \"ticket\"\r\n\r\n  //For Table Headers, define what headers we want to see\r\n  const tableHeaders =\r\n  {\r\n    \"Ticked ID\": \"\",\r\n    \"Ticket Name\": \"\",\r\n    \"Status\": \"\",\r\n    \"Application\": \"\",\r\n    \"Severity\": \"\",\r\n    \"Developer\": \"\"\r\n  }\r\n\r\n\r\n  const filterCriteria =\r\n  {\r\n    \"Status\": \"\",\r\n    \"Application\": \"\",\r\n    \"Severity\": \"\",\r\n    \"Developer\": \"\"\r\n  }\r\n\r\n  return (\r\n    <TableView headers={Object.keys(tableHeaders)} filterCriteria={filterCriteria} tableData={tableData} tableType={tableType} />\r\n  )\r\n}\r\n\r\n//Headers passed in from parent TableType\r\n//Table Data for rows passed into TableBody by Filter component, since filter will modify the rows displayed\r\nconst TableView = (props) => {\r\n  const { headers, filterCriteria, tableData, tableType } = props;\r\n  //Pass filter name key as prop\r\n  return (\r\n    <TableToolBar tableData={tableData} filterCriteria={filterCriteria} headers={headers} tableType={tableType} />\r\n  )\r\n}\r\n\r\nconst TableToolBar = (props) => {\r\n  const { tableData = { tableData }, filterCriteria = { filterCriteria }, headers = { headers }, tableType = { tableType } } = props\r\n  return (\r\n    <FilterButton tableData={tableData} filterCriteria={filterCriteria} headers={headers} tableType={tableType} />\r\n  )\r\n}\r\n\r\nconst FilterButton = (props) => {\r\n  const { tableData = { tableData }, filterCriteria = { filterCriteria }, headers = { headers }, tableType = { tableType } } = props\r\n  const [filterColumnStatus, setfilterColumnStatus] = useState(false)\r\n  const [filterStatus, setfilterStatus] = useState(false)\r\n  const [filterColumn, setfilterColumn] = useState()\r\n  const [filterValue, setfilterValue] = useState()\r\n  const [updatedTableData, setUpdatedTableData] = useState(tableData)\r\n  const history2 = useHistory()\r\n\r\n  const handleClick = (filterColumnClicked) => {\r\n    setfilterColumnStatus(!filterColumnStatus)\r\n    setfilterColumn(filterColumnClicked)\r\n  }\r\n\r\n  //Display All Column Filter Options passed in as Props from Parent \r\n  //Send column filter clicked to handleclick and then to child component\r\n  const buildFilterColumnDropdown = () => {\r\n    return (\r\n      Object.keys(filterCriteria).map((value, index) => {\r\n        return (\r\n          <Dropdown.Item key={index} onClick={() => handleClick(value)} >\r\n            {value}\r\n          </Dropdown.Item>\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  const buildFilterValueDropdown = () => {\r\n    //Get unique filter values from passed in filter name that was chosen from table's data\r\n    const uniqueFilterKeyValues = [...new Set(tableData.map(value => value[filterColumn]))]\r\n\r\n    return (\r\n      uniqueFilterKeyValues.map((value, index) => {\r\n        return (\r\n          <Dropdown.Item key={index} onClick={() => handleClick2(value)} >\r\n            {value}\r\n          </Dropdown.Item >\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  //After choosing what to filter by\r\n  const handleClick2 = (dropDownValue) => {\r\n    setfilterValue(dropDownValue)\r\n    setfilterStatus(!filterStatus)\r\n    console.log(`Filter Column: ${filterColumn}`)\r\n    console.log(`Filter Value: ${filterValue}`)\r\n    filterStatus ?\r\n      setUpdatedTableData(tableData)\r\n      :\r\n      setUpdatedTableData(tableData.filter(row => row[filterColumn] === dropDownValue))\r\n\r\n  }\r\n\r\n  //Clear button resets both states to negative\r\n  const handleClick3 = () => {\r\n    setfilterColumnStatus(!filterColumnStatus)\r\n    setfilterStatus(!filterStatus)\r\n    filterStatus ?\r\n      setUpdatedTableData(tableData)\r\n      :\r\n      setUpdatedTableData(tableData.filter(row => row[filterColumn] === filterValue))\r\n  }\r\n\r\n\r\n  //Displaying buttons based on state updates from the handleClick methods\r\n  return (\r\n    <div>\r\n      <ListGroup horizontal >\r\n        <ListGroup.Item>\r\n          {\r\n            !filterColumnStatus && !filterStatus ?\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\">\r\n                  Choose Column Filter\r\n              </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {buildFilterColumnDropdown()}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              : filterColumnStatus && !filterStatus ?\r\n                <Dropdown>\r\n                  <Dropdown.Toggle variant=\"success\">\r\n                    Filter By {filterColumn}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    {buildFilterValueDropdown()}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                :\r\n                <Button variant=\"success\" size=\"md\" onClick={() => handleClick3()}>Clear {filterColumn} Filter</Button>\r\n          }\r\n        </ListGroup.Item>\r\n        <ListGroup.Item>\r\n          <Button variant=\"success\" onClick={() => history2.push(`${tableType}/create`)} >\r\n            Create Ticket\r\n          </Button>\r\n        </ListGroup.Item>\r\n      </ListGroup>\r\n      <TableHeader tableData={updatedTableData} filterCriteria={filterCriteria} headers={headers} tableType={tableType} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TableHeader = (props) => {\r\n\r\n  const { headers, tableData, tableType } = props;\r\n  const [headerSort, setheaderSort] = useState();\r\n  const [sortStatus, setsortStatus] = useState(false);\r\n\r\n\r\n  //sends the table header column name clicked to be sorted\r\n  //changes the table header column to be sorted by ascending or descending\r\n  const handleClick = (headerClicked) => {\r\n    setheaderSort(headerClicked)\r\n    setsortStatus(!sortStatus)\r\n  }\r\n\r\n  return (\r\n\r\n    <Table striped bordered hover responsive=\"md\" >\r\n      <thead className=\"thead-dark\" key=\"header-1\">\r\n        <tr key=\"header-0\">\r\n          {headers && headers.map((value, index) => {\r\n            return <th key={index} onClick={() => handleClick(value)}><div>{value}</div></th>\r\n          })}\r\n        </tr>\r\n      </thead>\r\n      <TableBody rows={tableData} headers={headers} sortField={headerSort} sortBy={sortStatus} tableType={tableType}></TableBody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nconst TableBody = (props) => {\r\n  const { headers, rows, sortField, sortBy, tableType } = props;\r\n  //on click of tr (tablerow) display the form for the row clicked\r\n  const history = useHistory()\r\n  //Primary Key of row used for unique row values and to view ticketdata\r\n  let trKey = \"Ticked ID\"\r\n\r\n  const handleClick = (rowID) => history.push(`${tableType}/update/${rowID}`)\r\n\r\n  //If true sort by ascending or if false sort by descending, column header to sort is passed by parent component\r\n  sortBy ?\r\n    rows.sort((a, b) => a[sortField] > b[sortField] ? 1 : -1)\r\n    :\r\n    rows.sort((a, b) => a[sortField] > b[sortField] ? -1 : 1)\r\n\r\n  //trKey is passed in by the highest component\r\n  function buildRow(row, headers) {\r\n    return (\r\n      <tr key={row[trKey]} onClick={() => handleClick(row[trKey])}>\r\n        {\r\n          headers.map((value, index) => {\r\n            return <td key={index}>{row[value]}</td >\r\n          })\r\n        }\r\n      </tr >\r\n    )\r\n  }\r\n  return (\r\n    <tbody>\r\n      {rows && rows.map((value) => {\r\n        return buildRow(value, headers)\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nexport default TableType;\r\n","import React from 'react'\r\n//If I remove line then I can't route, make sure to NOT COPY PASTE, need to manually add exception\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom'\r\nimport TableType from './TableType'\r\n//import Routes from './Routes'\r\n//import Form from './Routes'\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <TableType />\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState, useEffect } from 'react'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory, useParams, withRouter } from 'react-router-dom'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n//Custom hook that handles all fields typed \r\nimport { useFormFields } from '../Libs/CustomHooks.js'\r\n\r\n\r\nfunction TicketForm() {\r\n    //CRUD and ID sent from TableType Component\r\n    const { crud, id } = useParams()\r\n    const history = useHistory()\r\n    //Setting dateCreated and user form control values explicitly\r\n    const [fields, handleFieldChange] = useFormFields(\r\n        {\r\n            \"ticketStatus\": \"\",\r\n            \"dateCreated\": \"\",\r\n            \"userName\": \"Test User\",\r\n            \"developerAssigned\": \"\",\r\n            \"ticketName\": \"\",\r\n            \"ticketDescription\": \"\",\r\n            \"severity\": \"\",\r\n            \"dueDate\": \"\",\r\n            \"applicationName\": \"\"\r\n        }\r\n    )\r\n\r\n    let severityObj = { \"Choose...\": \"\", \"High\": \"\", \"Medium\": \"\", \"Low\": \"\" }\r\n\r\n    const [missingValue, setmissingValue] = useState(true)\r\n    const [missingValueArray, setmissingValueArray] = useState([])\r\n    const [getAPIStatus, setgetAPIStatus] = useState()\r\n    const [putAPIStatus, setputAPIStatus] = useState()\r\n    const [apiLoading, setapiLoading] = useState(true)\r\n    const [developerArray, setdeveloperArray] = useState()\r\n    const [applicationArray, setapplicationArray] = useState()\r\n    const [ticketName, setticketName] = useState(fields[\"ticketName\"])\r\n    const [dueDate, setdueDate] = useState(fields[\"dueDate\"])\r\n    const [dateCreated, setdateCreated] = useState(fields.dateCreated)\r\n    const [success, setsuccess] = useState(false)\r\n    const [newTicket, setnewTicket] = useState()\r\n    let requestOptions\r\n\r\n    //COMPARE ARRAY OF OBJECTS OF EXPECTED VS WHAT WAS ENTERED IN STATE\r\n    const handleSubmit = () => {\r\n        let missingValArray = []\r\n\r\n        //Compare to see if keys(fields) exist\r\n        //if they don't exist push missing key(field) to array which updates state array\r\n        let choose = \"Choose...\"\r\n\r\n        for (const prop in fields) {\r\n\r\n            if (fields[prop] == \"\" || null) {\r\n                missingValArray.push(prop)\r\n            }\r\n\r\n            if (fields[prop] == choose) {\r\n                missingValArray.push(prop)\r\n            }\r\n        }\r\n\r\n        setmissingValueArray(missingValArray)\r\n\r\n        //if there are any missing fields, change the missing value state to trigger alert\r\n        //if no missing fields set missing state to false and send alert\r\n        if (missingValArray.length > 0) {\r\n            setmissingValue(true)\r\n        } else if (missingValArray.length == 0) {\r\n            setmissingValue(false)\r\n        }\r\n\r\n        //console.log(`Submit Fields: ${JSON.stringify(fields)}`)\r\n\r\n        if (missingValArray.length == 0 && crud == \"update\") {\r\n            let myHeaders = new Headers()\r\n            myHeaders.append(\"Content-Type\", \"application/json\")\r\n\r\n            let raw =\r\n                JSON.stringify({\r\n                    ticketID: id,\r\n                    ticketName: fields[\"ticketName\"],\r\n                    ticketDescription: fields[\"ticketDescription\"],\r\n                    severity: fields[\"severity\"],\r\n                    dateCreated: fields[\"dateCreated\"],\r\n                    dateDue: fields[\"dueDate\"],\r\n                    userName: fields[\"userName\"],\r\n                    status: fields[\"ticketStatus\"],\r\n                    applicationID: fields[\"applicationName\"],\r\n                    developerID: fields.developerAssigned\r\n                })\r\n\r\n            requestOptions =\r\n            {\r\n                method: \"PUT\",\r\n                headers: myHeaders,\r\n                body: raw,\r\n                redirect: \"follow\"\r\n            }\r\n\r\n            fetch(`http://karstenbugtracker.azurewebsites.net/api/tickets/${id}`, requestOptions)\r\n                .then(res => res.text())\r\n                .then(\r\n                    (result) => {\r\n                        setputAPIStatus(result)\r\n                        console.log(`Success Put API: ${putAPIStatus}`)\r\n                        console.log(`Success Result: ${result}`)\r\n                        setsuccess(true)\r\n                    },\r\n                    (error) => {\r\n                        setputAPIStatus(error)\r\n                        console.log(`Error Put API: ${putAPIStatus}`)\r\n                        console.log(`Error Result: ${error}`)\r\n                    }\r\n                )\r\n\r\n        } else if (missingValArray.length == 0 && crud == \"create\") {\r\n\r\n\r\n            let myHeaders = new Headers()\r\n            myHeaders.append(\"Content-Type\", \"application/json\")\r\n\r\n            let newDate = fields.dateCreated\r\n            newDate.setDate(newDate.getDate() - 1)\r\n\r\n            let newDueDate = fields.dueDate\r\n            newDueDate.setDate(newDueDate.getDate() - 1)\r\n\r\n            let raw =\r\n                JSON.stringify({\r\n                    ticketName: fields[\"ticketName\"],\r\n                    ticketDescription: fields[\"ticketDescription\"],\r\n                    severity: fields[\"severity\"],\r\n                    dateCreated: newDate,\r\n                    dateDue: newDueDate,\r\n                    userName: fields[\"userName\"],\r\n                    status: fields[\"ticketStatus\"],\r\n                    applicationID: fields[\"applicationName\"],\r\n                    developerID: fields.developerAssigned\r\n                })\r\n\r\n            requestOptions =\r\n            {\r\n                method: \"POST\",\r\n                headers: myHeaders,\r\n                body: raw,\r\n                redirect: \"follow\"\r\n            }\r\n\r\n            fetch(`http://karstenbugtracker.azurewebsites.net/api/tickets`, requestOptions)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        setputAPIStatus(result)\r\n                        console.log(`Success Post API: ${putAPIStatus}`)\r\n                        JSON.stringify(result)\r\n                        console.log(`New Ticket Data ${result}`)\r\n                        setnewTicket({ \"ticketID\": result.ticketID, \"ticketName\": result.ticketName })\r\n                    },\r\n                    (error) => {\r\n                        setputAPIStatus(error)\r\n                        console.log(`Error Post API: ${putAPIStatus}`)\r\n                        console.log(error)\r\n                    }\r\n                )\r\n        }\r\n    }\r\n\r\n\r\n    //Call all Get APIs\r\n    useEffect(() => {\r\n        if (crud == \"update\") {\r\n            fetch(`http://karstenbugtracker.azurewebsites.net/api/tickets/${id}`)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        setgetAPIStatus(result)\r\n                        setapiLoading(false)\r\n                        fields.ticketName = result[0].ticketName\r\n                        fields.ticketDescription = result[0].ticketDescription\r\n                        fields.severity = result[0].severity\r\n                        fields.userName = result[0].userName\r\n                        let dueDateFormat = new Date(result[0].dateDue)\r\n                        fields.dueDate = dueDateFormat\r\n                        let dateCreatedFormat = new Date(result[0].dateCreated)\r\n                        fields.dateCreated = dateCreatedFormat\r\n                        setdateCreated(dateCreatedFormat.toDateString())\r\n                        fields.developerAssigned = result[0].developer.developerID\r\n                        fields.applicationName = result[0].application.applicationID\r\n                        fields.ticketStatus = result[0].status\r\n\r\n                        //Doing this so there is a re-render and the fields constant values are displayed in form\r\n                        setticketName(fields.ticketName)\r\n                        setdueDate(fields.dueDate)\r\n\r\n                    },\r\n                    (error) => {\r\n                        setgetAPIStatus(error)\r\n                        console.log(`Failed: ${getAPIStatus}`)\r\n                    }\r\n                )\r\n        }\r\n        fetch(`http://karstenbugtracker.azurewebsites.net/api/developers`)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setgetAPIStatus(result)\r\n                    setdeveloperArray(result)\r\n                    setapiLoading(false)\r\n                },\r\n                (error) => {\r\n                    setgetAPIStatus(error)\r\n                    console.log(`Failed: ${getAPIStatus}`)\r\n                }\r\n            )\r\n        fetch(`http://karstenbugtracker.azurewebsites.net/api/applications`)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setgetAPIStatus(result)\r\n                    setapplicationArray(result)\r\n                    setapiLoading(false)\r\n                },\r\n                (error) => {\r\n                    setapiLoading(false)\r\n                    setgetAPIStatus(error)\r\n                    console.log(`Failed: ${getAPIStatus}`)\r\n                }\r\n            )\r\n        //Settinf fields for new tickets\r\n        if (crud == \"create\") {\r\n            fields.userName = \"Test User\"\r\n            fields.ticketStatus = \"Open\"\r\n            fields.dateCreated = new Date()\r\n        }\r\n    }, [])\r\n\r\n    const showSuccessAlert = () => {\r\n        return (\r\n            <Alert variant=\"info\" onClose={() => setsuccess(false)} dismissible>\r\n                <Alert.Heading>\r\n                    <p>Update Successful</p>\r\n                </Alert.Heading>\r\n            </Alert >\r\n        )\r\n    }\r\n\r\n    const showSuccessNewTicketAlert = () => {\r\n        return (\r\n            <Alert variant=\"info\" onClose={() => history.push(`/home`)} dismissible>\r\n                <Alert.Heading>\r\n                    <p>{`Ticket #: ${newTicket.ticketID} ${newTicket.ticketName} created`}</p>\r\n                </Alert.Heading>\r\n            </Alert >\r\n        )\r\n    }\r\n\r\n    const showSpinner = () => {\r\n        return (\r\n            <Spinner animation=\"border\" role=\"status\" size=\"xl\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n        )\r\n    }\r\n\r\n    const showAlert = () => {\r\n        return (\r\n            <Alert variant=\"danger\" show={missingValue && missingValueArray.length > 0 ? true : false}>\r\n                <Alert.Heading><h4>Please Fill</h4></Alert.Heading>\r\n                {\r\n                    missingValueArray.map((value, index) => {\r\n                        return (\r\n                            <p key={index}>\r\n                                {value}\r\n                            </p>\r\n                        )\r\n                    })\r\n                }\r\n            </Alert>\r\n        )\r\n    }\r\n\r\n    //Handle when severity is chosen\r\n    const handleSeverity = (event) => {\r\n        let High = `\"High\"`\r\n        let Medium = `\"Medium\"`\r\n        let Low = `\"Low\"`\r\n        let Severity = JSON.stringify(event.target.value)\r\n        let dueDate = new Date()\r\n\r\n        if (Severity == High) {\r\n            dueDate.setDate(dueDate.getDate() + 1)\r\n        } else if (Severity == Medium) {\r\n            dueDate.setDate(dueDate.getDate() + 5)\r\n        } else if (Severity == Low) {\r\n            dueDate.setDate(dueDate.getDate() + 10)\r\n        } else {\r\n            dueDate = null\r\n        }\r\n\r\n        //Setting date based on logic\r\n        fields.dueDate = dueDate\r\n\r\n        setdueDate(fields.dueDate)\r\n\r\n        //Adds Severity to handlefieldchange hook\r\n        handleFieldChange(event)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                newTicket ?\r\n                    showSuccessNewTicketAlert()\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                success ?\r\n                    showSuccessAlert()\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                apiLoading && crud == \"update\" ?\r\n                    showSpinner()\r\n                    :\r\n                    < Form >\r\n                        {showAlert()}\r\n\r\n                        < Row >\r\n                            <Col lg={6}>\r\n                                <Form.Group controlId=\"ticketNumber\">\r\n                                    <Form.Label >Ticket #:</Form.Label>\r\n                                    <Form.Control defaultValue={crud == \"update\" ? id : null} readOnly=\"true\" />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={6}>\r\n                                <Form.Group controlId=\"ticketStatus\">\r\n                                    <Form.Label>Ticket Status</Form.Label>\r\n                                    <Form.Control as=\"select\" value={fields[\"ticketStatus\"]} onChange={handleFieldChange}>\r\n                                        <option>Open</option>\r\n                                        <option>Closed</option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row >\r\n\r\n                        <Row>\r\n                            <Col lg={4}>\r\n                                <Form.Group controlId=\"ticketName\">\r\n                                    <Form.Label >Ticket Name</Form.Label>\r\n                                    <Form.Control placeholder=\"Enter Ticket Name\" onChange={handleFieldChange} defaultValue={ticketName} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={8}>\r\n                                <Form.Group controlId=\"ticketDescription\">\r\n                                    <Form.Label >Issue Description</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows={2} placeholder=\"Enter Ticket Description\" onChange={handleFieldChange} defaultValue={fields[\"ticketDescription\"]} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col lg={4} md={4}>\r\n                                <Form.Group controlId=\"severity\">\r\n                                    <Form.Label >Severity</Form.Label>\r\n                                    <Form.Control as={crud == \"update\" ? \"textarea\" : \"select\"} onChange={handleSeverity} value={crud == \"update\" ? fields[\"severity\"] : null} readOnly={crud == \"update\" ? true : false}>\r\n\r\n                                        {\r\n                                            crud == \"update\" ?\r\n                                                null\r\n                                                :\r\n                                                Object.keys(severityObj).map((value, key) => {\r\n                                                    return (\r\n                                                        <option key={key}>{value}</option>\r\n                                                    )\r\n                                                })\r\n                                        }\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={4} md={4}>\r\n                                <Form.Group controlId=\"applicationName\">\r\n                                    <Form.Label >Application</Form.Label>\r\n                                    <Form.Control as=\"select\" onChange={handleFieldChange} value={fields[\"applicationName\"]}>\r\n                                        {\r\n                                            crud == \"update\" ?\r\n                                                null\r\n                                                :\r\n                                                <option>Choose...</option>\r\n                                        }\r\n\r\n                                        {\r\n                                            applicationArray && fields ?\r\n                                                applicationArray.map((value, key) => {\r\n                                                    return (\r\n                                                        <option value={value.applicationID} key={key}>\r\n                                                            {`${value.applicationName}`}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={4} md={4} >\r\n                                <Form.Group controlId=\"developerAssigned\">\r\n                                    <Form.Label >Developer Assigned</Form.Label>\r\n                                    <Form.Control as=\"select\" onChange={handleFieldChange} value={fields[\"developerAssigned\"]}>\r\n                                        {\r\n                                            crud == \"update\" ?\r\n                                                null\r\n                                                :\r\n                                                <option>Choose...</option>\r\n                                        }\r\n                                        {\r\n                                            developerArray && fields ?\r\n                                                developerArray.map((value, key) => {\r\n                                                    return (\r\n                                                        <option value={value.developerID} key={key}>\r\n                                                            {`${value.developerFirstName} ${value.developerLastName}`}\r\n                                                        </option>\r\n                                                    )\r\n                                                })\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col lg={4} md={6}>\r\n                                <Form.Group controlId=\"dateCreated\">\r\n                                    <Form.Label >Date Created</Form.Label>\r\n                                    <Form.Control readOnly defaultValue={crud == \"update\" ? dateCreated : new Date().toDateString()} onChange={handleFieldChange} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={4} md={6} >\r\n                                <Form.Group controlId=\"dueDate\">\r\n                                    <Form.Label >Due Date</Form.Label>\r\n                                    <Form.Control defaultValue={dueDate ? dueDate.toDateString() : null} onChange={handleFieldChange} readOnly />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={4} md={6} >\r\n                                <Form.Group controlId=\"userName\">\r\n                                    <Form.Label >User Name</Form.Label>\r\n                                    <Form.Control defaultValue={fields[\"userName\"]} onChange={handleFieldChange} readOnly />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col xs={6}>\r\n                                <Form.Group>\r\n                                    <Button onClick={() => handleSubmit()} disabled={success || newTicket ? true : false}>\r\n                                        Submit\r\n                                    </Button>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col xs={6}>\r\n                                <Form.Group>\r\n                                    <Button onClick={(() => history.push(\"/home\"))}>\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form >\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TicketForm","import { useState } from 'react'\r\n\r\nexport const useFormFields = (initialState) => {\r\n    //console.log(`Custom Hook Initial State: ${JSON.stringify(initialState)}`)\r\n    const [fieldValues, setfieldValues] = useState(initialState);\r\n    return [\r\n        fieldValues,\r\n        (event) => {\r\n            setfieldValues(\r\n                {\r\n                    ...fieldValues,\r\n                    [event.target.id]: event.target.value\r\n                }\r\n            )\r\n        }\r\n    ]\r\n}","\r\n//MODULE IMPORT\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport React from 'react'\r\n\r\n\r\n//COMPONENTS\r\nimport Applications from './Applications'\r\nimport Developers from './Developers'\r\nimport Home from './Home'\r\nimport TicketForm from './Forms/TicketForm'\r\n//import Routes from './Routes'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom'\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <Router >\r\n            <Navbar bg=\"primary\" expand=\"lg\">\r\n                <Navbar.Brand as={Link} to=\"/home\"><h1>Bug Tracker</h1></Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav defaultActiveKey=\"/home\" as=\"ul\">\r\n                        {/*\r\n                        <Nav.Item as=\"li\">\r\n                            <Nav.Link as={Link} to=\"/home\" >Home</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item as=\"li\">\r\n                            <Nav.Link as={Link} to=\"/developers\" >Developers</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item as=\"li\">\r\n                            <Nav.Link as={Link} to=\"/applications\">Applications</Nav.Link>\r\n                        </Nav.Item>\r\n                         */}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            {/* All Routes*/}\r\n            <Switch>\r\n                <Route path=\"/ticket/:crud/:id\">\r\n                    <TicketForm />\r\n                </Route>\r\n                <Route path=\"/ticket/:crud\">\r\n                    <TicketForm />\r\n                </Route>\r\n                <Route path=\"/home\">\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/developers\">\r\n                    <Developers />\r\n                </Route>\r\n                <Route path=\"/applications\">\r\n                    <Applications />\r\n                </Route>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n","/* eslint-disable react/prop-types */\n//MODULE IMPORT\nimport React from 'react'\nimport './App.css'\nimport Container from 'react-bootstrap/Container'\n//Must have for react-router to work, don't copy/paste, need to manually add and then make eslint exception\n// eslint-disable-next-line no-unused-vars\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom'\n\n//COMPONENT IMPORT\nimport Navigation from './Components/Navigation'\n\nfunction App() {\n\n  return (\n    <Container fluid=\"lg\">\n      <Navigation />\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n// Add CDN after Create React App and adding React Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}